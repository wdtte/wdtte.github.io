<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java创建线程的四种方法</title>
    <link href="/2023/04/13/Java%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2023/04/13/Java%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>四种方法包括：实现Runnable接口实现run ()方法、继承Thread类重写run()方法、实现Callable接口实现call()方法、由线程池通过submit() | execute() 方法创建</p><span id="more"></span><h3 id="Java创建线程的四种方法"><a href="#Java创建线程的四种方法" class="headerlink" title="Java创建线程的四种方法"></a>Java创建线程的四种方法</h3><h4 id="1-实现Runnable接口"><a href="#1-实现Runnable接口" class="headerlink" title="1. 实现Runnable接口"></a>1. 实现<code>Runnable</code>接口</h4><p>创建一个类实现<code>Runnable</code>接口，实现<code>run()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例化一个该类的对象传入<code>Thread()</code>构造方法，通过创建的thread对象调用<code>start()</code>方法就开启了该线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread1</span>());<br>    thread1.start();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-继承Thread类"><a href="#2-继承Thread类" class="headerlink" title="2. 继承Thread类"></a>2. 继承<code>Thread</code>类</h4><p>创建一个类继承<code>Thread</code>类，重写<code>run()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例化一个该类的对象传入<code>Thread()</code>构造方法，通过创建的thread对象调用<code>start()</code>方法就开启了该线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread2</span>());<br>    thread2.start();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-实现-Callable接口"><a href="#3-实现-Callable接口" class="headerlink" title="3.实现 Callable接口"></a>3.实现 <code>Callable</code>接口</h4><p>创建一个类实现<code>Callable</code>接口，实现<code>call()</code>方法</p><p><code>call()</code>方法是有返回值的，所以这种方法用来创建有返回值的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(Thread.currentThread().getName());<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实例化一个该类的对象传入<code>FutureTask&lt;&gt;()</code>构造方法，创建一个<code>FutureTask&lt;&gt;</code>类型的对象，将该对象传入<code>Thread()</code>构造方法，调用<code>start()</code>方法就开启了该线程（泛型是返回值的类型）</p><p>通过上面创建的<code>FutureTask&lt;&gt;</code>类型的对象调用<code>get()</code>方法可以拿到<code>call()</code>的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    FutureTask&lt;String&gt; futureTask = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;String&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread3</span>());<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask);<br>    thread3.start();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> futureTask.get();<br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-线程池"><a href="#4-线程池" class="headerlink" title="4.线程池"></a>4.线程池</h4><h5 id="线程池的工作流程："><a href="#线程池的工作流程：" class="headerlink" title="线程池的工作流程："></a>线程池的工作流程：</h5><p>​当新的任务来到线程池</p><ol><li>如果此时<strong>线程池中线程数少于<code>corePoolSize</code><strong>，就会创建</strong>新的核心线程执行该任务</strong>，<strong>即使有空闲的核心线程</strong></li><li>如果此时<strong>线程池中线程数等于<code>corePoolSize</code><strong>，并且</strong>没有空闲核心线程</strong>，新的任务就会<strong>加入任务队列等待</strong>（如果有空闲核心线程就会让空闲核心线程执行吗？）</li><li>如果<strong>任务队列已满</strong>，但是线程数还<strong>没有达到<code>maximumPoolSize</code><strong>，就会创建</strong>新的临时线程来执行该任务</strong></li><li>如果<strong>线程数量已达最大线程数</strong>，并且<strong>任务队列已满</strong>，新的任务就<strong>会被拒</strong>绝，并由<code>RejectedExecutionHandler</code>处理</li></ol><p>​一个任务被执行完成后，就会从任务队列中拉取下一个任务来执行，核心线程会永久存活，临时线程空闲超过存活时间就会被释放。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;<br>    <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">threadPoolExecutor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<br>    <span class="hljs-number">100</span>, <span class="hljs-comment">//corePoolSize</span><br>    <span class="hljs-number">200</span>, <span class="hljs-comment">//maximumPoolSize</span><br>    <span class="hljs-number">60</span>, <span class="hljs-comment">//keepAliveTime</span><br>    TimeUnit.SECONDS,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="hljs-number">100</span>)<br>    );<br>    threadPoolExecutor.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(Thread.currentThread().getName());<br>        &#125;<br>    &#125;);<br>    Future&lt;String&gt; submit = threadPoolExecutor.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Callable</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        System.out.println(Thread.currentThread().getName());<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HelloWorld&quot;</span>;<br>            &#125;<br>    &#125;);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> submit.get();<br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Javase</category>
      
      <category>多线程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Test Article</title>
    <link href="/2023/04/12/Test-Article/"/>
    <url>/2023/04/12/Test-Article/</url>
    
    <content type="html"><![CDATA[<p>This a test article in order to check the pages</p><span id="more"></span><p><img src="https://gitee.com/wdtte/images/raw/master/202304122310891.png" alt="image-20230412231023834"></p><h3 id="Hello-Test"><a href="#Hello-Test" class="headerlink" title="Hello Test"></a>Hello Test</h3><p>This is a code block</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.wdte.springboot_mybatis.bean;<br><br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Wdttee</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description</span> This is description of class</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@datetime</span> 19:38 2023/4/11 2023</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Fundamentals"><a href="#Fundamentals" class="headerlink" title="Fundamentals"></a>Fundamentals</h1><p>This is the first article in a series of articles about three.js. <a href="https://threejs.org/">Three.js</a> is a 3D library that tries to make it as easy as possible to get 3D content on a webpage.</p><p>Three.js is often confused with WebGL since more often than not, but not always, three.js uses WebGL to draw 3D. <a href="https://webglfundamentals.org/">WebGL is a very low-level system that only draws points, lines, and triangles</a>. To do anything useful with WebGL generally requires quite a bit of code and that is where three.js comes in. It handles stuff like scenes, lights, shadows, materials, textures, 3d math, all things that you’d have to write yourself if you were to use WebGL directly.</p><p>These tutorials assume you already know JavaScript and, for the most part they will use ES6 style. <a href="https://threejs.org/manual/en/prerequisites.html">See here for a terse list of things you’re expected to already know</a>. Most browsers that support three.js are auto-updated so most users should be able to run this code. If you’d like to make this code run on really old browsers look into a transpiler like <a href="https://babeljs.io/">Babel</a>. Of course users running really old browsers probably have machines that can’t run three.js.</p><p>When learning most programming languages the first thing people do is make the computer print <code>&quot;Hello World!&quot;</code>. For 3D one of the most common first things to do is to make a 3D cube. So let’s start with “Hello Cube!”</p><p>Before we get started let’s try to give you an idea of the structure of a three.js app. A three.js app requires you to create a bunch of objects and connect them together. Here’s a diagram that represents a small three.js app</p><p><img src="https://raw.githubusercontent.com/wdtte/image/main/202304120827809.png"></p><p>Things to notice about the diagram above.</p><ul><li><p>There is a <a href="https://threejs.org/docs/#api/en/constants/Renderer"><code>Renderer</code></a>. This is arguably the main object of three.js. You pass a <a href="https://threejs.org/docs/#api/en/scenes/Scene"><code>Scene</code></a> and a <a href="https://threejs.org/docs/#api/en/cameras/Camera"><code>Camera</code></a> to a <a href="https://threejs.org/docs/#api/en/constants/Renderer"><code>Renderer</code></a> and it renders (draws) the portion of the 3D scene that is inside the <em>frustum</em> of the camera as a 2D image to a canvas.</p></li><li><p>There is a <a href="https://threejs.org/manual/en/scenegraph.html">scenegraph</a> which is a tree like structure, consisting of various objects like a <a href="https://threejs.org/docs/#api/en/scenes/Scene"><code>Scene</code></a> object, multiple <a href="https://threejs.org/docs/#api/en/objects/Mesh"><code>Mesh</code></a> objects, <a href="https://threejs.org/docs/#api/en/lights/Light"><code>Light</code></a> objects, <a href="https://threejs.org/docs/#api/en/objects/Group"><code>Group</code></a>, <a href="https://threejs.org/docs/#api/en/core/Object3D"><code>Object3D</code></a>, and <a href="https://threejs.org/docs/#api/en/cameras/Camera"><code>Camera</code></a> objects. A <a href="https://threejs.org/docs/#api/en/scenes/Scene"><code>Scene</code></a> object defines the root of the scenegraph and contains properties like the background color and fog. These objects define a hierarchical parent&#x2F;child tree like structure and represent where objects appear and how they are oriented. Children are positioned and oriented relative to their parent. For example the wheels on a car might be children of the car so that moving and orienting the car’s object automatically moves the wheels. You can read more about this in <a href="https://threejs.org/manual/en/scenegraph.html">the article on scenegraphs</a>.</p><p>Note in the diagram <a href="https://threejs.org/docs/#api/en/cameras/Camera"><code>Camera</code></a> is half in half out of the scenegraph. This is to represent that in three.js, unlike the other objects, a <a href="https://threejs.org/docs/#api/en/cameras/Camera"><code>Camera</code></a> does not have to be in the scenegraph to function. Just like other objects, a <a href="https://threejs.org/docs/#api/en/cameras/Camera"><code>Camera</code></a>, as a child of some other object, will move and orient relative to its parent object. There is an example of putting multiple <a href="https://threejs.org/docs/#api/en/cameras/Camera"><code>Camera</code></a> objects in a scenegraph at the end of <a href="https://threejs.org/manual/en/scenegraph.html">the article on scenegraphs</a>.</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/01/hello-world/"/>
    <url>/2022/03/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
