<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/03/01/hello-world/"/>
    <url>/2022/03/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h1 id="哈哈哈哈哈"><a href="#哈哈哈哈哈" class="headerlink" title="哈哈哈哈哈"></a>哈哈哈哈哈</h1><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法学习路线</title>
    <link href="/2022/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <url>/2022/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>链接：<a href="https://www.processon.com/view/link/61d2d3d01e08530666ae3326">https://www.processon.com/view/link/61d2d3d01e08530666ae3326</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树的存储与遍历</title>
    <link href="/2022/01/11/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E9%81%8D%E5%8E%86/"/>
    <url>/2022/01/11/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E4%B8%8E%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树的存储与遍历"><a href="#二叉树的存储与遍历" class="headerlink" title="二叉树的存储与遍历"></a>二叉树的存储与遍历</h1><h3 id="一、实验目的"><a href="#一、实验目的" class="headerlink" title="一、实验目的"></a>一、实验目的</h3><ol><li>掌握二叉树的非线性和递归性特点</li><li>掌握二叉树的存储结构</li><li>掌握二叉树遍历操作的实现方法</li></ol><h3 id="二、实验内容"><a href="#二、实验内容" class="headerlink" title="二、实验内容"></a>二、实验内容</h3><blockquote><p>（1）采用链式存储结构建立二叉树，并按先序输入二叉树的结点序列。例如建立时按先序输入的结点序列为： <code>abc000de0f00g00</code>；<br>（2）二叉树的建立、先序遍历、中序遍历、后序遍历均采用递归方式实现。<br>（3）主函数中对各项功能进行测试。</p></blockquote><h3 id="三、实验步骤及编码"><a href="#三、实验步骤及编码" class="headerlink" title="三、实验步骤及编码"></a>三、实验步骤及编码</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></div></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><br>FILE* pfile;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>//声明二叉链表数据结构</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> data;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>* <span class="hljs-title">lchild</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span>* <span class="hljs-title">rchild</span>;</span><br>&#125;bintnode;<br><br><span class="hljs-keyword">typedef</span> bintnode* BinTree;<br><br>BinTree <span class="hljs-title function_">creat_bitree</span><span class="hljs-params">()</span><span class="hljs-comment">//构建二叉树</span><br>&#123;<br><span class="hljs-type">char</span> ch;<br>BinTree bt;<br><span class="hljs-built_in">fscanf</span>(pfile,<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch);<br><span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;0&#x27;</span>)<br>bt = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">else</span> &#123;<br>bt = (bintnode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(bintnode));<br>bt-&gt;data = ch;<br>bt-&gt;lchild = creat_bitree();<br>bt-&gt;rchild = creat_bitree();<br>&#125;<br><span class="hljs-keyword">return</span> bt;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">preorder</span><span class="hljs-params">(BinTree bt)</span><span class="hljs-comment">//递归先序遍历</span><br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, bt-&gt;data);<br>preorder(bt-&gt;lchild);<br>preorder(bt-&gt;rchild);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">inorder</span><span class="hljs-params">(BinTree bt)</span><span class="hljs-comment">//递归中序遍历</span><br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span>;<br>inorder(bt-&gt;lchild);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, bt-&gt;data);<br>inorder(bt-&gt;rchild);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">postorder</span><span class="hljs-params">(BinTree bt)</span><span class="hljs-comment">//递归后序遍历</span><br>&#123;<br><span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">NULL</span>)<span class="hljs-keyword">return</span>;<br>postorder(bt-&gt;lchild);<br>postorder(bt-&gt;rchild);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, bt-&gt;data);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">(BinTree bt)</span><span class="hljs-comment">//销毁二叉树</span><br>&#123;<br><br><span class="hljs-keyword">if</span> (bt != <span class="hljs-literal">NULL</span>)<br>&#123;<br>destroy(bt-&gt;lchild);<br>destroy(bt-&gt;rchild);<br><span class="hljs-built_in">free</span>(bt);<br>&#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>pfile = fopen(<span class="hljs-string">&quot;data.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br>BinTree bt = <span class="hljs-literal">NULL</span>;<br>bt = creat_bitree();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;先序历遍序列为：&quot;</span>);<br>preorder(bt);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;中序历遍序列为：&quot;</span>);<br>inorder(bt);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;后序历遍序列为：&quot;</span>);<br>postorder(bt);<br>destroy(bt);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、实验结果及结论"><a href="#四、实验结果及结论" class="headerlink" title="四、实验结果及结论"></a>四、实验结果及结论</h3><h2 id="五、实验中遇到的问题、解决方法及进一步的想法等"><a href="#五、实验中遇到的问题、解决方法及进一步的想法等" class="headerlink" title="### 五、实验中遇到的问题、解决方法及进一步的想法等"></a><img src="http://wdttee.top/2021/11/10/1330f5dd85859.jpg" alt="capture_20211110223703690.jpg"><br>### 五、实验中遇到的问题、解决方法及进一步的想法等</h2><p><strong>遇到的问题：</strong>在程序的调试中，数据输入是一个麻烦的问题，上百次的调试便有上百次的数据输入，很麻烦而且很容易出错。<br><strong>解决方法：</strong>在程序文件所在的文件夹新建一个<code>.txt</code>文件写入数据，在C程序中用<code>fopen()</code>函数自动读入数据<br><strong>用法如下：</strong><a href="https://blog.csdn.net/Sub_lele/article/details/78007919?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163655023616780366596217%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163655023616780366596217&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-78007919.pc_search_mgc_flag&utm_term=c++%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">详情以及<code>scanf</code>和<code>scanf_s</code>的区别见此链接</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C">FILE* pfile;<br><span class="hljs-built_in">fscanf</span>(pfile,<span class="hljs-string">&quot;%c&quot;</span>, &amp;ch);<br>pfile = fopen(<span class="hljs-string">&quot;data.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
